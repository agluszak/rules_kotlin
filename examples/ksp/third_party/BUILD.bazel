load("@rules_java//java:defs.bzl", "java_plugin")
load("@rules_kotlin//kotlin:core.bzl", "kt_compiler_plugin", "kt_ksp_plugin", "kt_plugin_cfg")

java_plugin(
    name = "autovalue",
    generates_api = True,
    processor_class = "com.google.auto.value.processor.AutoValueProcessor",
    visibility = ["//visibility:public"],
    deps = ["@maven_rules_kotlin_example//:com_google_auto_value_auto_value"],
)

kt_compiler_plugin(
    name = "ksp",
    compile_phase = True,
    id = "com.google.devtools.ksp.symbol-processing",
    options = {
        "allWarningsAsErrors": "false",
        "apclasspath": "{classpath}",
        # Directory to write KSP caches. Shouldn't matter because incremental is disabled
        "cachesDir": "{temp}",
        # Directory where class files are written to. Files written to this directory are class
        # files being written directly from the annotation processor, not Kotlinc
        "classOutputDir": "{generatedClasses}",
        # Disable incremental mode
        "incremental": "false",
        # Directory where generated Java sources files are written to
        "javaOutputDir": "{generatedSources}",
        # Directory where generated Kotlin sources files are written to
        "kotlinOutputDir": "{generatedSources}",
        # TODO(bencodes) Not sure what this directory is yet.
        "kspOutputDir": "{temp}",
        # projectBaseDir shouldn't matter because incremental is disabled
        "projectBaseDir": "{temp}",
        # Directory where META-INF data is written to. This might not be the most ideal place to
        # write this. Maybe just directly to the classes directory?
        "resourceOutputDir": "{generatedSources}",
        # Set returnOkOnError to false because we want to fail the build if there are any errors
        "returnOkOnError": "false",
        # Include in compilation as an example. This should be processed in the stubs phase.
        "withCompilation": "true",
    },
    visibility = ["//visibility:public"],
    deps = [
        "@rules_kotlin//kotlin/compiler:symbol-processing-api",
        "@rules_kotlin//kotlin/compiler:symbol-processing-cmdline",
    ],
)

kt_plugin_cfg(
    name = "ksp_moshi",
    options = {
    },
    plugin = ":ksp",
    visibility = ["//visibility:public"],
    deps = [
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi",
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi_kotlin",
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi_kotlin_codegen",
    ],
)

kt_ksp_plugin(
    name = "moshi-kotlin-codegen",
    processor_class = "com.squareup.moshi.kotlin.codegen.ksp.JsonClassSymbolProcessorProvider",
    visibility = ["//visibility:public"],
    deps = [
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi",
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi_kotlin",
        "@maven_rules_kotlin_example//:com_squareup_moshi_moshi_kotlin_codegen",
    ],
)

kt_ksp_plugin(
    name = "dagger_ksp_plugin",
    generates_java = True,
    processor_class = "dagger.internal.codegen.KspComponentProcessor",
    target_embedded_compiler = True,
    visibility = ["//visibility:public"],
    deps = ["@maven_rules_kotlin_example//:com_google_dagger_dagger_compiler"],
)

kt_ksp_plugin(
    name = "autoservice",
    processor_class = "dev.zacsweers.autoservice.ksp.AutoServiceSymbolProcessor$Provider",
    visibility = ["//visibility:public"],
    deps = [
        "@maven_rules_kotlin_example//:com_google_auto_service_auto_service_annotations",
        "@maven_rules_kotlin_example//:dev_zacsweers_autoservice_auto_service_ksp",
    ],
)
