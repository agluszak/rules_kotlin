# Copyright 2018 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Generated macro to define Kotlin compiler artifacts based on the actual distribution.
This file is automatically generated by the kotlin_compiler_git_repository rule.
"""

def define_kotlin_repo():
    """
    Defines java_import targets for all jars found in the Kotlin compiler distribution.
    Uses glob() to conditionally create targets only for jars that actually exist,
    making it resilient to changes in the compiler distribution across versions.
    """

    # Create individual filegroups for each jar (for backwards compatibility)
    # Note: only replace "." with "_", keep "/" as is to match old behavior
    for name in native.glob(["lib/**"]):
        native.filegroup(
            name = name.replace(".", "_"),
            srcs = [name],
            visibility = ["//visibility:public"],
        )

    # Define java_import targets for commonly used jars
    # These are defined conditionally based on what exists

    # Required compiler jars
    _compiler = native.glob(["lib/kotlin-compiler.jar"])
    if _compiler:
        native.java_import(
            name = "kotlin-compiler",
            jars = _compiler,
            visibility = ["//visibility:public"],
        )

    # Standard library jars (should always exist)
    _stdlib = native.glob(["lib/kotlin-stdlib.jar"])
    if _stdlib:
        native.java_import(
            name = "kotlin-stdlib",
            jars = _stdlib,
            visibility = ["//visibility:public"],
        )

    _stdlib_jdk7 = native.glob(["lib/kotlin-stdlib-jdk7.jar"])
    if _stdlib_jdk7:
        native.java_import(
            name = "kotlin-stdlib-jdk7",
            jars = _stdlib_jdk7,
            visibility = ["//visibility:public"],
        )

    _stdlib_jdk8 = native.glob(["lib/kotlin-stdlib-jdk8.jar"])
    if _stdlib_jdk8:
        native.java_import(
            name = "kotlin-stdlib-jdk8",
            jars = _stdlib_jdk8,
            visibility = ["//visibility:public"],
        )

    # Reflection library
    _reflect = native.glob(["lib/kotlin-reflect.jar"])
    if _reflect:
        native.java_import(
            name = "kotlin-reflect",
            jars = _reflect,
            visibility = ["//visibility:public"],
        )

    # Annotations (version may vary)
    _annotations = native.glob(["lib/annotations-*.jar"])
    if _annotations:
        native.java_import(
            name = "annotations",
            jars = _annotations,
            visibility = ["//visibility:public"],
        )

    # Coroutines
    _coroutines = native.glob(["lib/kotlinx-coroutines-core-jvm.jar"])
    if _coroutines:
        native.java_import(
            name = "kotlinx-coroutines-core-jvm",
            jars = _coroutines,
            visibility = ["//visibility:public"],
        )

    # Trove4j - OPTIONAL (removed in Kotlin 2.2+)
    # Always create the target for backwards compatibility, but it may be empty
    _trove4j = native.glob(["lib/trove4j.jar"])
    if _trove4j:
        native.java_import(
            name = "trove4j",
            jars = _trove4j,
            visibility = ["//visibility:public"],
        )
    else:
        # Create an empty filegroup for backwards compatibility
        # This ensures that references to //kotlin/compiler:trove4j don't fail
        native.filegroup(
            name = "trove4j",
            srcs = [],
            visibility = ["//visibility:public"],
        )
        # Also create the underscore version for backwards compatibility
        native.filegroup(
            name = "lib/trove4j_jar",
            srcs = [],
            visibility = ["//visibility:public"],
        )

    # kotlin-annotation-processing-compiler - OPTIONAL (removed in Kotlin 2.2+)
    _kapt_compiler = native.glob(["lib/kotlin-annotation-processing-compiler.jar"])
    if _kapt_compiler:
        native.java_import(
            name = "kotlin-annotation-processing-compiler",
            jars = _kapt_compiler,
            visibility = ["//visibility:public"],
        )
    else:
        # Create an empty filegroup for backwards compatibility
        native.filegroup(
            name = "kotlin-annotation-processing-compiler",
            srcs = [],
            visibility = ["//visibility:public"],
        )
        native.filegroup(
            name = "lib/kotlin-annotation-processing-compiler_jar",
            srcs = [],
            visibility = ["//visibility:public"],
        )

    # Scripting libraries
    _scripting_common = native.glob(["lib/kotlin-scripting-common.jar"])
    if _scripting_common:
        native.java_import(
            name = "kotlin-scripting-common",
            jars = _scripting_common,
            visibility = ["//visibility:public"],
        )

    _scripting_compiler = native.glob(["lib/kotlin-scripting-compiler.jar"])
    if _scripting_compiler:
        native.java_import(
            name = "kotlin-scripting-compiler",
            jars = _scripting_compiler,
            visibility = ["//visibility:public"],
        )

    _scripting_compiler_impl = native.glob(["lib/kotlin-scripting-compiler-impl.jar"])
    if _scripting_compiler_impl:
        native.java_import(
            name = "kotlin-scripting-compiler-impl",
            jars = _scripting_compiler_impl,
            visibility = ["//visibility:public"],
        )

    _scripting_jvm = native.glob(["lib/kotlin-scripting-jvm.jar"])
    if _scripting_jvm:
        native.java_import(
            name = "kotlin-scripting-jvm",
            jars = _scripting_jvm,
            visibility = ["//visibility:public"],
        )

    # Script runtime
    _script_runtime = native.glob(["lib/kotlin-script-runtime.jar"])
    if _script_runtime:
        native.java_import(
            name = "kotlin-script-runtime",
            jars = _script_runtime,
            visibility = ["//visibility:public"],
        )

    # Test libraries
    _test = native.glob(["lib/kotlin-test.jar"])
    if _test:
        native.java_import(
            name = "kotlin-test",
            jars = _test,
            visibility = ["//visibility:public"],
        )

    _test_junit = native.glob(["lib/kotlin-test-junit.jar"])
    if _test_junit:
        native.java_import(
            name = "kotlin-test-junit",
            jars = _test_junit,
            visibility = ["//visibility:public"],
        )

    _test_junit5 = native.glob(["lib/kotlin-test-junit5.jar"])
    if _test_junit5:
        native.java_import(
            name = "kotlin-test-junit5",
            jars = _test_junit5,
            visibility = ["//visibility:public"],
        )

    _test_testng = native.glob(["lib/kotlin-test-testng.jar"])
    if _test_testng:
        native.java_import(
            name = "kotlin-test-testng",
            jars = _test_testng,
            visibility = ["//visibility:public"],
        )

    # Compiler plugins
    _allopen = native.glob(["lib/allopen-compiler-plugin.jar"])
    if _allopen:
        native.java_import(
            name = "allopen-compiler-plugin",
            jars = _allopen,
            visibility = ["//visibility:public"],
        )

    _noarg = native.glob(["lib/noarg-compiler-plugin.jar"])
    if _noarg:
        native.java_import(
            name = "noarg-compiler-plugin",
            jars = _noarg,
            visibility = ["//visibility:public"],
        )

    _sam_with_receiver = native.glob(["lib/sam-with-receiver-compiler-plugin.jar"])
    if _sam_with_receiver:
        native.java_import(
            name = "sam-with-receiver-compiler-plugin",
            jars = _sam_with_receiver,
            visibility = ["//visibility:public"],
        )

    _serialization = native.glob(["lib/kotlinx-serialization-compiler-plugin.jar"])
    if _serialization:
        native.java_import(
            name = "kotlinx-serialization-compiler-plugin",
            jars = _serialization,
            visibility = ["//visibility:public"],
        )

    _assignment = native.glob(["lib/assignment-compiler-plugin.jar"])
    if _assignment:
        native.java_import(
            name = "assignment-compiler-plugin",
            jars = _assignment,
            visibility = ["//visibility:public"],
        )

    _lombok = native.glob(["lib/lombok-compiler-plugin.jar"])
    if _lombok:
        native.java_import(
            name = "lombok-compiler-plugin",
            jars = _lombok,
            visibility = ["//visibility:public"],
        )

    _parcelize = native.glob(["lib/parcelize-compiler.jar"])
    if _parcelize:
        native.java_import(
            name = "parcelize-compiler",
            jars = _parcelize,
            visibility = ["//visibility:public"],
        )

    _parcelize_runtime = native.glob(["lib/parcelize-runtime.jar"])
    if _parcelize_runtime:
        native.java_import(
            name = "parcelize-runtime",
            jars = _parcelize_runtime,
            visibility = ["//visibility:public"],
        )

    # Kotlin home filegroup containing everything (for tools that need it)
    native.filegroup(
        name = "home",
        srcs = native.glob(["**"]),
        visibility = ["//visibility:public"],
    )

    # All lib jars filegroup for compiler classpath
    native.filegroup(
        name = "all_lib_jars",
        srcs = native.glob(["lib/*.jar"]),
        visibility = ["//visibility:public"],
    )
